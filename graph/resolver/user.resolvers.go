package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"errors"
	"fmt"
	"grpcgqlgo/generated/graph/model"
	"grpcgqlgo/generated/proto/models"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	res, err := r.UserServiceClient.FetchUser(ctx, &models.FetchUserRequest{})

	if err != nil {
		return nil, err
	}

	product, err := r.ProductServiceClient.FetchProducts(ctx, &models.FetchProductRequest{})

	if err != nil {
		return nil, err
	}

	fmt.Println(product)

	if len(res.Users) == 0 {
		return nil, errors.New("no users found")
	}

	Users := make([]*model.User, 0, len(res.Users))
	for _, user := range res.Users {
		Users = append(Users, &model.User{
			ID:    user.Id,
			Name:  user.Name,
			Email: "Peerapat",
		})
	}

	return Users, nil
}
